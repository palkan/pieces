{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/core/utils/index.js","src/core/utils/string.js","src/index.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;sBCAc,UAAU;;;;;ACAxB,YAAY,CAAA;;;;;;;;;;;;;;;;;;;;;;;;AAcZ,IAAI,QAAQ,GAAG,GAAG,CAAC;;AAEZ,SAAS,GAAG,GAAW;MAAV,IAAI,yDAAG,EAAE;;AAC3B,cAAU,IAAI,GAAG,EAAE,QAAQ,CAAE;CAC9B;;AAAA,CAAC;;AAEF,SAAS,IAAI,CAAC,GAAG,EAAC;AAChB,SAAO,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC;CACrC;;;;;;;;;;;;AAYM,SAAS,QAAQ,CAAC,GAAG,EAAC;AAC3B,SAAO,CAAC,EAAE,GAAC,GAAG,CAAA,CAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;CACzC;;;;;;;;;;;;AAYM,SAAS,UAAU,CAAC,GAAG,EAAC;AAC7B,MAAG,CAAC,GAAG,EAAE,OAAO;AAChB,SAAO,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;CAC7D;;;;;;;;;;;;;AAaD,SAAS,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAC;AACpC,SAAO,MAAM,GAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,GAAC,GAAG,CAAC;CACjF;;AAED,IAAM,YAAY,GAAG,8BAA8B,CAAC;;AAE7C,SAAS,UAAU,CAAC,GAAG,EAAC;AAC7B,SAAO,CAAC,EAAE,GAAC,GAAG,CAAA,CAAE,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;CAChD;;;;;;;;;;;;;;AAcM,SAAS,SAAS,CAAC,GAAG,EAAC;AAC5B,MAAG,GAAG,IAAI,KAAK,CAAC,AAAC,EAAE,OAAO,IAAI,CAAC;AAC/B,KAAG,GAAG,EAAE,GAAC,GAAG,CAAC;AACb,UAAO,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE;AAC7B,SAAK,MAAM;AAAE,aAAO,IAAI,CAAC;AAAA,AACzB,SAAK,WAAW;AAAE,aAAO,SAAS,CAAC;AAAA,AACnC,SAAK,MAAM;AAAE,aAAO,IAAI,CAAC;AAAA,AACzB,SAAK,OAAO;AAAE,aAAO,KAAK,CAAC;AAAA,AAC3B,SAAK,EAAE;AAAE,aAAO,EAAE,CAAC;AAAA,AACnB;AAAS,aAAO,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAC/B,GAAG,GACH,KAAK,CAAC;AAAA,GAClB;CACF;;;;;;;;;AASM,SAAS,WAAW,CAAC,GAAG,EAAC;AAC9B,MAAI,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;AACzB,MAAI,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AACtC,SAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,CAAA,AAAC,GACxC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAChB,GAAG,CAAA;CACR;;;;;;;;;AASM,SAAS,MAAM,CAAC,GAAG,EAAC;AACzB,SAAO,CAAC,EAAE,GAAC,GAAG,CAAA,CAAE,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,EAAC,GAAG,CAAC,CAAC;CAC5C;;;;;;;;;;;;yBC7HkB,cAAc;;IAArB,CAAC;;AAEN,SAAS,EAAE,GAAE,EACnB;;AAED,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC","file":"build.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export * from './string';","'use strict'\n\n/**\n * Return unique string with prefix (if provided)\n * \n * @example \n *  uid() #=> \"101\"\n *  uid() #=> \"102\" \n *  uid(\"pre\") #=> \"pre103\"\n *\n * @param {String} [pref]\n * @return {String}\n */\n\nvar _uniq_id = 100;\n\nexport function uid(pref = \"\"){\n  return `${pref}${++_uniq_id}`\n};\n\nfunction toUp(str){\n  return str ? str.toUpperCase() : '';\n}\n\n/**\n * Convert string from underscore to camel case\n * \n * @example \n *  camelize('my_name') #=> \"MyName\"\n *\n * @param {String} str\n * @return {String}\n */\n\nexport function camelize(str){\n  return (''+str).replace(/-(\\w)/g, toUp);\n}\n\n/**\n * Convert the first letter of a string to upper case\n * \n * @example \n *  capitalize('my name') #=> \"My name\"\n *\n * @param {String} str\n * @return {String}\n */\n\nexport function capitalize(str){\n  if(!str) return;\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n\n/**\n * Convert string to underscore from came case\n * \n * @example \n *  underscore('MyName') #=> \"my_name\"\n *  underscore('myName') #=> \"my_name\"\n *\n * @param {String} str\n * @return {String}\n */\n\nfunction toSnake(m, p, offset, string){\n  return offset+p.length == string.length ? p.toLowerCase() : p.toLowerCase()+'_';\n}\n\nconst notsnake_rxp = /((?:^[^A-Z]|[A-Z])+[^A-Z]*)/g;\n\nexport function underscore(str){\n  return (''+str).replace(notsnake_rxp, toSnake);\n}\n\n/**\n * Serialize string\n *\n * @example\n *   serialize('null') #=> null\n *   serialize('1.2') #=> 1.2\n *   serialize('true') #=> true\n * \n * @param {String} str\n * @return {*}\n */\n\nexport function serialize(str){\n  if(str == void(0)) return null;\n  str = ''+str;\n  switch(str.toLowerCase().trim()){\n    case 'null': return null;\n    case 'undefined': return undefined;\n    case 'true': return true;\n    case 'false': return false;\n    case '': return '';\n    default: return isNaN(val_n = Number(val))\n             ? val\n             : val_n;\n  }\n}\n\n/**\n * Strip quotes from a string (or do nothing if no quotes found)\n *\n * @param {String} str\n * @return {String}\n */\n\nexport function stripQuotes(str){\n  var a = str.charCodeAt(0)\n  var b = str.charCodeAt(str.length - 1)\n  return a === b && (a === 0x22 || a === 0x27)\n    ? str.slice(1, -1)\n    : str\n}\n\n/**\n * Replace double spaces with single space\n *\n * @param {String} str\n * @return {String}\n */\n\nexport function squish(str){\n  return (''+str).trim().replace(/\\s+/g,' ');\n}\n","import * as _ from \"./core/utils\"\n\nexport function pi(){\n}\n\npi.utils = _;\n"]}